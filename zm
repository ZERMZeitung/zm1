#!/bin/bash
website="https://zerm.chrissx.ga/"
css="../style.css"
blogfile="2019.html"
indexfile="index.html"
rssfile="rss.xml"
[ -z "$EDITOR" ] && EDITOR="vim"

[ ! -d "zerm/.drafts" ] &&
read -erp "Initialize ZERM here? " ask &&
    if [ "$ask" = "y" ]; then
	echo "Initializing ZERM system..."
	mkdir -pv "zerm/.drafts" || echo "Error. Do you have write permissions in this directory?"
	echo "Options +Indexes" > "zerm/.htaccess"
else
	exit
fi

newpost() {
        read -erp "Give a title for your article:
        " title
	echo "$title" | grep "\"" >/dev/null && echo "Use unicode quotes in titles." && exit
	url="$(echo "$title" | iconv -cf UTF-8 -t ASCII//TRANSLIT | tr -d '[:punct:]' | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | sed "s/-\+/-/g;s/\(^-\|-\$\)//g")"
	echo "AddDescription \"$title\" \"$url.html\"" >> "zerm/.htaccess" || { echo "Error: Is htaccess writeable?"; exit; }
	[ -f "zerm/.drafts/$url.html" ] && echo "There is already an existing draft entry of that same name/URL." && exit
	[ -f "zerm/$url.html" ] && echo "There is already an existing published entry of that same name/URL." && exit
	$EDITOR "zerm/.drafts/$url.html"
}

listandReturn() {
        filecount=$(ls "$1" | wc -l)
        [ $filecount -eq 0 ] && echo "There's nothing to $2." && exit 1
        number=1
        [ $filecount -eq 1 ] || {
                ls -rc "$1" | awk -F '/' '{print $NF}' | nl
                read -erp "Pick an entry by number to $2, or press Ctrl-C to cancel. " number
        }
	chosen="$(ls -rc "$1" | nl | grep -w "$number" | awk '{print $2}')"
	basefile="$(basename "$chosen")" && base="${basefile%.*}"
}

publish() { \
	delete
	htaccessentry=$(grep "$basefile" "zerm/.htaccess")
	realname="$(echo "$htaccessentry" | cut -d'"' -f2)"
	rssdate="$(grep "$basefile" zerm/.htaccess | sed "s/.*\.html\"* *#*//g" | tr -d '\n')"
	[ -z "$rssdate" ] && rssdate="$(LC_TIME=en_US date '+%a, %d %b %Y %H:%M:%S %z')" # RSS date formats must comply with standards to validate.
	webdate="$(date '+%d.%m.%Y %H:%M:%S %Z')" # But this visible date you can set to any format.
	tmpdir=$(mktemp -d)
        echo -n "Author name: "
        read author_name
        [ ! -f ".authors/$author_name" ] && echo "Author \"$author_name\" doesn't exist." && exit 1
        author=$(cat ".authors/$author_name")
        SHORT_URL_ID=0
        while [ -f zm/$SHORT_URL_ID.html ] ; do SHORT_URL_ID=$(($SHORT_URL_ID + 1)) ; done
        LONG_URL="$website"zerm/"$basefile"
        echo "<html><head><meta http-equiv='refresh' content='0; URL=$LONG_URL'></head><body>Sie sollten <a href='$LONG_URL'>hierhin</a> weitergeleitet werden.</body></html>" > zm/$SHORT_URL_ID.html
	echo "<html>
<head>
<title>$realname</title>
<link rel='stylesheet' type='text/css' href='$css'>
</head>
<body>
<a href='../index.html'>zurück</a>
<h1>$realname</h1>
<small>[<a href='$basefile'>standalone</a>]</small>
$(cat "zerm/.drafts/$basefile")
<iframe scrolling='no' frameborder='0' style='width: 70px; height: 20px;' src='https://platform.twitter.com/widgets/tweet_button.0639d67d95b7680840758b6833f06d87.de.html#dnt=false&amp;lang=de&amp;text=$(echo "$realname" | sed "s/ /%20/g" | sed "s/?/%3F/g")%20#ZERM&amp;type=share&amp;url=https%3A%2F%2Fzm.chrissx.ga%2F$SHORT_URL_ID&amp;via=ZERMZeitung'></iframe>
<br/><br/>
<footer>von <strong>$author</strong></footer>
</body>
</html>" > "zerm/$basefile"
	echo "
<item>
<title>$realname</title>
<guid>$website$blogfile#$base</guid>
<pubDate>$rssdate</pubDate>
<description><![CDATA[
$(cat "zerm/.drafts/$basefile")
]]></description>
</item>
" > "$tmpdir/rss"
	echo "<div class='entry'>
<h2 id='$base'>$realname</h2>
<small>[<a href='#$base'>link</a>&mdash;<a href='zerm/$basefile'>standalone</a>]</small>
$(cat "zerm/.drafts/$basefile")
<small>$webdate</small>
</div>" > "$tmpdir/html"
	echo "<li>$(date '+%d.%m.%Y') &ndash; <a href=\"zerm/$basefile\">$realname</a></li>" > "$tmpdir/index"
	sed -i "/<!-- ZERM -->/r $tmpdir/html" "$blogfile"
	sed -i "/<!-- ZERM -->/r $tmpdir/rss" "$rssfile"
	sed -i "/<!-- ZERM -->/r $tmpdir/index" "$indexfile"
	sed -i "/ \"$base.html\"/d" "zerm/.htaccess"
	echo "AddDescription \"$realname\" \"$basefile\" #$rssdate" >> "zerm/.htaccess"
	rm -f "zerm/.drafts/$chosen"
}

confirm() {
        read -erp "Really $1 \"$base\"? (y/N) " choice
        [ "$choice" = "y" ] || exit 1
}

delete() { \
	sed -i "/<item/{:a;N;/<\\/item>/!ba};/#$base<\\/guid/d" $rssfile
	sed -i "/<div class='entry'>/{:a;N;/<\\/div>/!ba};/id='$base'/d" $blogfile
	sed -i "/<li>.*<a href=\"zerm\\/$base.html\">/d" $indexfile
	rm "zerm/$basefile" 2>/dev/null && \
                echo "Old ZERM article removed."
}

revise() {
        # this breaks because of the twitter button
        awk '/^<small>\[/{flag=1;next}/<footer>/{flag=0}flag' "zerm/$chosen" > "zerm/.drafts/$basefile"
	"$EDITOR" "zerm/.drafts/$basefile"
	echo "Revision stored in zerm/.drafts. Publish as normal entry when desired."
}

case "$1" in
	n*) newpost ;;
	e*) listandReturn zerm/.drafts/ edit && "$EDITOR" "zerm/.drafts/$chosen" ;;
	p*) listandReturn zerm/.drafts/ publish && publish ;;
	t*) listandReturn zerm/.drafts/ trash && confirm trash && rm -f "zerm/.drafts/$chosen" && sed -i "/ \"$base.html\"/d" "zerm/.htaccess" ; echo "Draft deleted." ;;
	d*) listandReturn zerm/ delete && confirm delete && delete && sed -i "/ \"$base.html\"/d" "zerm/.htaccess" ;;
	r*) listandReturn zerm/ revise && revise ;;
	*) echo "zm by Christian Häußler <chrissx@chrissx.ga>, based on lb by Luke Smith <luke@lukesmith.xyz>
Usage:
  zm n: new draft
  zm e: edit draft
  zm p: publish/finalize draft
  zm r: revise published entry
  zm t: discard draft
  zm d: delete published entry

Be sure to have the following pattern added to your RSS feed, blog file and blog index:

<!-- ZERM -->

New content will be added directly below that sequence. This is required.
See https://github.com/chrissxYT/zm for more." ;;
esac
