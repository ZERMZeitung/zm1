#!/bin/bash
website="https://zerm.chrissx.ga/"
css="../style.css"
blogfile="2019.html"
indexfile="index.html"
rssfile="rss.xml"
[ -z "$EDITOR" ] && EDITOR="vim"

[ ! -d "zerm/.drafts" ] &&
read -erp "Initialize ZERM in $webdir?" ask &&
	if [ "$ask" = "y" ]; then
	printf "Initializing ZERM system...\\n"
	mkdir -pv "zerm/.drafts" || printf "Error. Do you have write permissions in this directory?\\n"
	echo "Options +Indexes" > "zerm/.htaccess"
else
	exit
fi

newpost() { read -erp "Give a title for your post:
	" title
	echo "$title" | grep "\"" >/dev/null && printf "Double quotation marks (\") are not allowed in entry titles.\\n" && exit
	url="$(echo "$title" | iconv -cf UTF-8 -t ASCII//TRANSLIT | tr -d '[:punct:]' | tr '[:upper:]' '[:lower:]' | tr ' ' '-' | sed "s/-\+/-/g;s/\(^-\|-\$\)//g")"
	echo "AddDescription \"$title\" \"$url.html\"" >> "zerm/.htaccess" || { echo "Error: Is htaccess writeable?"; exit; }
	[ -f "zerm/.drafts/$url.html" ] && echo "There is already an existing draft entry of that same name/URL." && exit
	[ -f "zerm/$url.html" ] && echo "There is already an existing published entry of that same name/URL." && exit
	$EDITOR "zerm/.drafts/$url.html" ;}

listandReturn() { printf "Listing contents of %s.\\n" "$1"
	ls -rc "$1" | awk -F '/' '{print $NF}' | nl
	read -erp "Pick an entry by number to $2, or press ctrl-c to cancel. " number
	chosen="$(ls -rc "$1" | nl | grep -w  "$number" | awk '{print $2}')"
	basefile="$(basename "$chosen")" && base="${basefile%.*}" ;}

publish() { \
	delete
	htaccessentry=$(grep "$basefile" "zerm/.htaccess")
	realname="$(echo "$htaccessentry" | cut -d'"' -f2)"
	rssdate="$(grep "$basefile" zerm/.htaccess | sed "s/.*\.html\"* *#*//g" | tr -d '\n')"
	[ -z "$rssdate" ] && rssdate="$(date '+%a, %d %b %Y %H:%M:%S %z')" # RSS date formats must comply with standards to validate.
	webdate="$(date '+%a, %d %b %Y %H:%M:%S %z')" # But this visible date you can set to any format.
	tmpdir=$(mktemp -d)
        echo -n "Author name: "
        read author_name
        [ ! -f ".authors/$author_name" ] && echo "Author \"$author_name\" doesn't exist." && exit 1
        author=$(sed 1q ".authors/$author_name")
        author_link=$(tac ".authors/$author_name" | sed 1q)
	printf "<html>\\n<head>\\n<title>%s</title>\\n<link rel='stylesheet' type='text/css' href='%s'>\\n<meta charset='utf-8'/>\\n</head>\\n<body>\\n<h1>%s</h1>\\n<small>[<a href='%s#%s'>link</a>&mdash;<a href='%s'>standalone</a>]</small>\\n%s\\n<footer>von <strong><a href='%s'>%s</a></strong></footer>\\n</body>\\n\\n</html>" "$realname" "$css" "$realname" "../$blogfile" "$base" "$basefile" "$(cat "zerm/.drafts/$basefile")" "$author_link" "$author" > "zerm/$basefile"
	printf "\\n<item>\\n<title>%s</title>\\n<guid>%s%s#%s</guid>\\n<pubDate>%s</pubDate>\\n<description><![CDATA[\\n%s\\n]]></description>\\n</item>\\n\\n" "$realname" "$website" "$blogfile" "$base" "$rssdate" "$(cat "zerm/.drafts/$basefile")" >  "$tmpdir/rss"
	printf "<div class='entry'>\\n<h2 id='%s'>%s</h2>\\n<small>[<a href='#%s'>link</a>&mdash;<a href='%s'>standalone</a>]</small>\\n%s\\n<small>%s</small>\\n</div>\\n" "$base" "$realname" "$base" "zerm/$basefile" "$(cat "zerm/.drafts/$basefile")" "$webdate" > "$tmpdir/html"
	printf "<li>%s &ndash; <a href=\"zerm/%s\">%s</a></li>\\n" "$(date '+%Y %b %d')" "$basefile" "$realname" > "$tmpdir/index"
	sed -i "/<!-- ZERM -->/r $tmpdir/html" "$blogfile"
	sed -i "/<!-- ZERM -->/r $tmpdir/rss" "$rssfile"
	sed -i "/<!-- ZERM -->/r $tmpdir/index" "$indexfile"
	sed -i "/ \"$base.html\"/d" "zerm/.htaccess"
	echo "AddDescription \"$realname\" \"$basefile\" #$rssdate" >> "zerm/.htaccess"
	rm -f "zerm/.drafts/$chosen"
}

confirm() { read -erp "Really $1 \"$base\"? (y/N) " choice && echo "$choice" | grep -i "^y$" >/dev/null || exit 1 ;}

delete() { \
	sed -i "/<item/{:a;N;/<\\/item>/!ba};/#$base.html<\\/guid/d" $rssfile
	sed -i "/<div class='entry'>/{:a;N;/<\\/div>/!ba};/id='$base'/d" $blogfile
	sed -i "/<li>.*<a href=\"zerm\\/$base.html\">/d" $indexfile
	rm "zerm/$basefile" 2>/dev/null && printf "Old ZERM article removed.\\n" ;}

revise() { awk '/^<small>\[/{flag=1;next}/<footer>/{flag=0}flag' "zerm/$chosen" > "zerm/.drafts/$basefile"
	"$EDITOR" "zerm/.drafts/$basefile"
	printf "Revision stored in zerm/.drafts. Publish as normal entry when desired.\\n" ;}

case "$1" in
	n*) newpost ;;
	e*) listandReturn zerm/.drafts/ edit && "$EDITOR" "zerm/.drafts/$chosen" ;;
	p*) listandReturn zerm/.drafts/ publish && publish ;;
	t*) listandReturn zerm/.drafts/ trash && confirm trash && rm -f "zerm/.drafts/$chosen" && sed -i "/ \"$base.html\"/d" "zerm/.htaccess" ; printf "Draft deleted.\\n" ;;
	d*) listandReturn zerm/ delete && confirm delete && delete && sed -i "/ \"$base.html\"/d" "zerm/.htaccess" ;;
	r*) listandReturn zerm/ revise && revise ;;
	*) printf "zm ZERM system by Christian Häußler <chrissx@chrissx.ga>, based on lb by Luke Smith <luke@lukesmith.xyz>\\nUsage:\\n  zm n:\\tnew draft\\n  zm e:\\tedit draft\\n  zm p:\\tpublish/finalize draft\\n  zm r:\\trevise published entry\\n  zm t:\\tdiscard draft\\n  zm d:\\tdelete published entry\\n\\nBe sure to have the following pattern added to your RSS feed, blog file and blog index:\\n\\n<!-- ZERM -->\\n\\nNew content will be added directly below that sequence. This is required.\\nSee https://github.com/chrissxYT/zm for more.\\n" ;;
esac
